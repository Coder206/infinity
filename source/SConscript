Import ('config', 'manager')

# Generate the configuration header. We don't generate with Kconfig because its
# too much of a pain to get SCons to do it properly.
f = open('config.h', 'w')
f.write('/* This file is automatically-generated, do not edit. */\n\n')
for (k, v) in config.items():
		if isinstance(v, str):
				f.write("#define CONFIG_%s \"%s\"\n" % (k, v))
		elif isinstance(v, bool) or isinstance(v, int):
				f.write("#define CONFIG_%s %d\n" % (k, int(v)))
		else:
				raise Exception, "Unsupported type %s in config" % (type(v))
f.close()

################################################################################
# Initium build                                                                #
################################################################################

# Create the build environment for the bootloader
env = manager.CreateBare(name = 'boot', flags = {
    'LIBS': [ ],
	'CCFLAGS': [ '-nostdlib', '-nostdinc', '-ffreestanding', '-fno-stack-protector'],
	'ASFLAGS': ['-nostdinc'],
	'LINKFLAGS': ['-nostdlib']
})

# Override any optimisation level specified, we want to optimise for size.
env['CCFLAGS'] = filter(lambda f: f[0:2] != '-O', env['CCFLAGS']) + ['-Os']

# Add the compiler include directory for some standard headers.
from subprocess import Popen, PIPE
incdir = Popen([env['CC'], '-print-file-name=include'], stdout = PIPE).communicate()[0].strip()
env['CCFLAGS'] += ['-isystem', incdir]
env['ASFLAGS'] += ['-isystem', incdir]

# We place the final output binaries in a single directory.
env['OUTDIR'] = Dir('bin')

# Build the bootloader
defaults = []
SConscript(dirs = ['boot'], exports = {
    'env': env, 'defaults': defaults, 'config': config, 'dirs': ['source']
})
