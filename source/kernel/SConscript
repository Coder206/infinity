Import('manager', 'config')

from util import FeatureSources
import os, shutil

# Create a new environment to build all the kernel components
env = manager.CreateBare(name = 'kernel', flags = {
    'CARGOFLAGS': [],

    'ASFLAGS': [
        '-nostdinc',
    ],
    'LINKFLAGS': [
        '-nostdlib',
    ]
})

##############################
# Build the boot information #
##############################

# select the files to build
sources = FeatureSources(config, [
    'bootinfo.S'
])

# Build
env.Program('boot-info', map(env.Object, sources))

####################
# Build the kernel #
####################

# Copy the src file
try:
    os.symlink(Dir('src').srcnode().abspath, Dir('src').abspath)
except Exception as e:
    pass

# Build Cargo crate
kernel = env.RunCargo('kernel.o', 'Cargo.toml')
#AlwaysBuild(kernel)

## Link the kernel
# Get the linker script location
env['LDSCRIPT'] = File('arch/' + config['ARCH'] + '/linker.ld')

# Performe the link operation
env.Command(
    'kernel-unstripped',
    kernel,
    Action('$LD --gc-sections -T $LDSCRIPT -o $TARGET $SOURCE %s' % (File('boot-info').path)))

# The kernel-unstripped target depends on the linker script
Depends('kernel-unstripped', [env['LDSCRIPT'], 'boot-info' ])

# Generate various information files and the stripped kernel image.
env.Command(['kernel', 'kernel.lst', 'kernel.rde', 'kernel.sym'], 'kernel-unstripped', [
    Action('$STRIP --strip-debug $SOURCE -o ${TARGETS[0]}', '$GENCOMSTR'),
    Action('$OBJDUMP -d $SOURCE > ${TARGETS[1]}', None),
    Action('$READELF -aW $SOURCE > ${TARGETS[2]}', None),
    Action('$NM -C $SOURCE | sort > ${TARGETS[3]}', None),
])

# Let the distribution environment know where the kernel is.
manager['dist']['KERNEL'] = File('kernel')
